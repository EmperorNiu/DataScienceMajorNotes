typedef semaphore;
semaphore mutex=1;
semaphore db=1;
int rc = 0;

void reader(void)
{
    while(TRUE){
        down(&mutex);
        rc = rc + 1;
        if(rc==1) down(&db);
        up(&mutex);

        read_data_base();

        down(&mutex);
        rc = rc - 1;
        if(rc==0)up(&db);
        up(&mutex);

        use_data_read();
    }
}

void writer(void)
{
    while(TRUE){
        think_up_data();
        down(&db);
        writer_up_data();
        up(&db);
    }

}


#include <stdio.h>
#include <stdlib.h>
#define N 5
#define LEFT (i+N-1)%N
#define RIGHT (i+1)%N
#define THINKING 0 //思考
#define HUNGRY 1 //想取得叉子
#define EATING 2 //正在吃面
typedef int semaphore;
int state[N];
semaphore mutex=1; //临界区互斥
semaphore s[N]; //每个哲学家一个信号量

void philosopher(int i)
{
    while(TRUE){
        think();
        take_forks(i);
        eat();
        put_forks(i);
    }
}
void take_forks(int i)
{
    down(&mutex);//进入临界区
    state[i]=HUNGRY;
    test(i);
    up(&mutex);//离开临界区
    down(&s[i]);//如果得不到叉子就阻塞

}
void put_forks(int i)
{
    down(&mutex);
    state[i]=THINKING;
    test(LEFT);
    test(RIGHT);
    up(&mutex);
}

void test(int i)
{
    if(state[i]==HUNGRY&&state[LEFT]!=EATING&&state[RIGHT]!=EATING){
        state[i]=EATING;
        up(&s[i]);
    }

}









